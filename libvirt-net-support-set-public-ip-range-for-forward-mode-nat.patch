From 591fb424dcecb9b2f10a29597fff8339db255cb2 Mon Sep 17 00:00:00 2001
Message-Id: <591fb424dcecb9b2f10a29597fff8339db255cb2.1373885146.git.jdenemar@redhat.com>
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Tue, 2 Jul 2013 03:48:44 -0400
Subject: [PATCH] net: support set public ip range for forward mode nat

This is part of the resolution to:

  https://bugzilla.redhat.com/show_bug.cgi?id=851455

Support setting which public ip to use for NAT via attribute
address in subelement <nat> in <forward>:

...
  <forward mode='nat'>
      <address start='1.2.3.4' end='1.2.3.10'/>
  </forward>
...

This will construct an iptables line using:

  '-j SNAT --to-source <start>-<end>'

instead of:

  '-j MASQUERADE'

Signed-off-by: Natanael Copa <ncopa@alpinelinux.org>
Signed-off-by: Laine Stump <laine@laine.org>
(cherry picked from commit 905629f47ed6eb12e149be45a10da2b61082ed88)

Conflicts:

    src/conf/network_conf.[ch]
    src/network/bridge_driver.c

      All items in virNetworkDef that were contained in the <forward>
      element (including the nat address range) had been moved into a
      separate struct called virNetworkForwardDef upstream. Since the
      RHEL6.5 version of libvirt lacked this separate struct, the new
      addrStart and addrEnd had to be put directly into virNetworkDef
      as forwardAddrStart and forwardAddrEnd, and all touched code had
      to be modified accordingly.
---
 docs/formatnetwork.html.in  |  18 +++++
 src/conf/network_conf.c     | 158 ++++++++++++++++++++++++++++++++++++++++++--
 src/conf/network_conf.h     |   3 +
 src/network/bridge_driver.c |  16 +++++
 src/util/iptables.c         |  66 +++++++++++++++---
 src/util/iptables.h         |   4 ++
 6 files changed, 250 insertions(+), 15 deletions(-)

diff --git a/docs/formatnetwork.html.in b/docs/formatnetwork.html.in
index 49206dd..7d9ddca 100644
--- a/docs/formatnetwork.html.in
+++ b/docs/formatnetwork.html.in
@@ -130,6 +130,24 @@
             network, and to/from the host to the guests, are
             unrestricted and not NATed.<span class="since">Since
             0.4.2</span>
+
+            <p><span class="since">Since 1.0.3</span> it is possible to
+            specify a public IPv4 address range to be used for the NAT by
+            using the <code>&lt;nat&gt;</code> and
+            <code>&lt;address&gt;</code> subelements.
+            <pre>
+...
+  &lt;forward mode='nat'&gt;
+    &lt;nat&gt;
+      &lt;address start='1.2.3.4' end='1.2.3.10'/&gt;
+    &lt;/nat&gt;
+  &lt;/forward&gt;
+...
+            </pre>
+            An singe IPv4 address can be set by setting
+            <code>start</code> and <code>end</code> attributes to
+            the same value.
+            </p>
           </dd>
 
           <dt><code>route</code></dt>
diff --git a/src/conf/network_conf.c b/src/conf/network_conf.c
index 89d9096..fd1cb21 100644
--- a/src/conf/network_conf.c
+++ b/src/conf/network_conf.c
@@ -1211,6 +1211,83 @@ error:
     return result;
 }
 
+static int
+virNetworkForwardNatDefParseXML(const char *networkName,
+                                xmlNodePtr node,
+                                xmlXPathContextPtr ctxt,
+                                virNetworkDefPtr def)
+{
+    int ret = -1;
+    xmlNodePtr *natAddrNodes = NULL;
+    int nNatAddrs;
+    char *addrStart = NULL;
+    char *addrEnd = NULL;
+    xmlNodePtr save = ctxt->node;
+
+    ctxt->node = node;
+
+    if (def->forwardType != VIR_NETWORK_FORWARD_NAT) {
+        virReportError(VIR_ERR_XML_ERROR,
+                       _("The <nat> element can only be used when <forward> 'mode' is 'nat' in network %s"),
+                       networkName);
+        goto cleanup;
+    }
+
+    /* addresses for SNAT */
+    nNatAddrs = virXPathNodeSet("./address", ctxt, &natAddrNodes);
+    if (nNatAddrs < 0) {
+        virReportError(VIR_ERR_XML_ERROR,
+                       _("invalid <address> element found in <forward> of "
+                         "network %s"), networkName);
+        goto cleanup;
+    } else if (nNatAddrs > 1) {
+        virReportError(VIR_ERR_XML_ERROR,
+                       _("Only one <address> element is allowed in <nat> in "
+                         "<forward> in network %s"), networkName);
+        goto cleanup;
+    } else if (nNatAddrs == 1) {
+        addrStart = virXMLPropString(*natAddrNodes, "start");
+        if (addrStart == NULL) {
+            virReportError(VIR_ERR_XML_ERROR,
+                           _("missing 'start' attribute in <address> element in <nat> in "
+                             "<forward> in network %s"), networkName);
+            goto cleanup;
+        }
+        addrEnd = virXMLPropString(*natAddrNodes, "end");
+        if (addrEnd == NULL) {
+            virReportError(VIR_ERR_XML_ERROR,
+                           _("missing 'end' attribute in <address> element in <nat> in "
+                             "<forward> in network %s"), networkName);
+            goto cleanup;
+        }
+    }
+
+    if (addrStart && virSocketAddrParse(&def->forwardAddrStart,
+                                        addrStart, AF_INET) < 0) {
+        virReportError(VIR_ERR_XML_ERROR,
+                       _("Bad ipv4 start address '%s' in <nat> in <forward> in "
+                         "network '%s'"), addrStart, networkName);
+        goto cleanup;
+    }
+
+    if (addrEnd && virSocketAddrParse(&def->forwardAddrEnd,
+                                      addrEnd, AF_INET) < 0) {
+        virReportError(VIR_ERR_XML_ERROR,
+                       _("Bad ipv4 end address '%s' in <nat> in <forward> in "
+                         "network '%s'"), addrEnd, networkName);
+        goto cleanup;
+    }
+
+    ret = 0;
+
+cleanup:
+    VIR_FREE(addrStart);
+    VIR_FREE(addrEnd);
+    VIR_FREE(natAddrNodes);
+    ctxt->node = save;
+    return ret;
+}
+
 static virNetworkDefPtr
 virNetworkDefParseXML(xmlXPathContextPtr ctxt)
 {
@@ -1222,10 +1299,12 @@ virNetworkDefParseXML(xmlXPathContextPtr ctxt)
     xmlNodePtr *forwardIfNodes = NULL;
     xmlNodePtr *forwardPfNodes = NULL;
     xmlNodePtr *forwardAddrNodes = NULL;
+    xmlNodePtr *forwardNatNodes = NULL;
     xmlNodePtr dnsNode = NULL;
     xmlNodePtr virtPortNode = NULL;
     xmlNodePtr forwardNode = NULL;
     int nIps, nPortGroups, nForwardIfs, nForwardPfs, nForwardAddrs;
+    int nForwardNats;
     char *forwardDev = NULL;
     char *forwardManaged = NULL;
     char *type = NULL;
@@ -1530,12 +1609,31 @@ virNetworkDefParseXML(xmlXPathContextPtr ctxt)
                 def->nForwardIfs++;
             }
         }
+        nForwardNats = virXPathNodeSet("./nat", ctxt, &forwardNatNodes);
+        if (nForwardNats < 0) {
+            virReportError(VIR_ERR_XML_ERROR,
+                           _("invalid <nat> element found in <forward> of network %s"),
+                           def->name);
+            goto error;
+        } else if (nForwardNats > 1) {
+            virReportError(VIR_ERR_XML_ERROR,
+                           _("Only one <nat> element is allowed in <forward> of network %s"),
+                           def->name);
+            goto error;
+        } else if (nForwardNats == 1) {
+            if (virNetworkForwardNatDefParseXML(def->name,
+                                                *forwardNatNodes,
+                                                ctxt, def) < 0)
+                goto error;
+        }
+
         VIR_FREE(type);
         VIR_FREE(forwardDev);
         VIR_FREE(forwardManaged);
         VIR_FREE(forwardPfNodes);
         VIR_FREE(forwardIfNodes);
         VIR_FREE(forwardAddrNodes);
+        VIR_FREE(forwardNatNodes);
         switch (def->forwardType) {
         case VIR_NETWORK_FORWARD_ROUTE:
         case VIR_NETWORK_FORWARD_NAT:
@@ -1591,6 +1689,8 @@ virNetworkDefParseXML(xmlXPathContextPtr ctxt)
     VIR_FREE(portGroupNodes);
     VIR_FREE(forwardIfNodes);
     VIR_FREE(forwardPfNodes);
+    VIR_FREE(forwardAddrNodes);
+    VIR_FREE(forwardNatNodes);
     VIR_FREE(forwardDev);
     ctxt->node = save;
     return NULL;
@@ -1828,12 +1928,53 @@ virPortGroupDefFormat(virBufferPtr buf,
     return 0;
 }
 
+static int
+virNetworkForwardNatDefFormat(virBufferPtr buf,
+                              const virNetworkDefPtr def)
+{
+    char *addrStart = NULL;
+    char *addrEnd = NULL;
+    int ret = -1;
+
+    if (VIR_SOCKET_ADDR_VALID(&def->forwardAddrStart)) {
+        addrStart = virSocketAddrFormat(&def->forwardAddrStart);
+        if (!addrStart)
+            goto cleanup;
+    }
+
+    if (VIR_SOCKET_ADDR_VALID(&def->forwardAddrEnd)) {
+        addrEnd = virSocketAddrFormat(&def->forwardAddrEnd);
+        if (!addrEnd)
+            goto cleanup;
+    }
+
+    if (!addrEnd && !addrStart)
+        return 0;
+
+    virBufferAddLit(buf, "<nat>\n");
+    virBufferAdjustIndent(buf, 2);
+
+    virBufferAsprintf(buf, "<address start='%s'", addrStart);
+    if (addrEnd)
+        virBufferAsprintf(buf, " end='%s'", addrEnd);
+    virBufferAddLit(buf, "/>\n");
+
+    virBufferAdjustIndent(buf, -2);
+    virBufferAddLit(buf, "</nat>\n");
+    ret = 0;
+
+cleanup:
+    VIR_FREE(addrStart);
+    VIR_FREE(addrEnd);
+    return ret;
+}
+
 char *virNetworkDefFormat(const virNetworkDefPtr def, unsigned int flags)
 {
     virBuffer buf = VIR_BUFFER_INITIALIZER;
     unsigned char *uuid;
     char uuidstr[VIR_UUID_STRING_BUFLEN];
-    int ii;
+    int ii, shortforward;
 
     virBufferAddLit(&buf, "<network");
     if (!(flags & VIR_NETWORK_XML_INACTIVE) && (def->connections > 0)) {
@@ -1868,11 +2009,18 @@ char *virNetworkDefFormat(const virNetworkDefPtr def, unsigned int flags)
             else
                 virBufferAddLit(&buf, " managed='no'");
         }
-        virBufferAsprintf(&buf, "%s>\n",
-                          (def->nForwardIfs || def->nForwardPfs) ? "" : "/");
+        shortforward = !(def->nForwardIfs || def->nForwardPfs
+                         || VIR_SOCKET_ADDR_VALID(&def->forwardAddrStart)
+                         || VIR_SOCKET_ADDR_VALID(&def->forwardAddrEnd));
+        virBufferAsprintf(&buf, "%s>\n", shortforward ? "/" : "");
         virBufferAdjustIndent(&buf, 2);
 
-        /* For now, hard-coded to at most 1 forwardPfs */
+        if (def->forwardType == VIR_NETWORK_FORWARD_NAT) {
+            if (virNetworkForwardNatDefFormat(&buf, def) < 0)
+                goto error;
+        }
+
+        /* For now, hard-coded to at most 1 forward.pfs */
         if (def->nForwardPfs)
             virBufferEscapeString(&buf, "<pf dev='%s'/>\n",
                                   def->forwardPfs[0].dev);
@@ -1901,7 +2049,7 @@ char *virNetworkDefFormat(const virNetworkDefPtr def, unsigned int flags)
             }
         }
         virBufferAdjustIndent(&buf, -2);
-        if (def->nForwardPfs || def->nForwardIfs)
+        if (!shortforward)
             virBufferAddLit(&buf, "</forward>\n");
     }
 
diff --git a/src/conf/network_conf.h b/src/conf/network_conf.h
index 4c0c8c1..b1c35e5 100644
--- a/src/conf/network_conf.h
+++ b/src/conf/network_conf.h
@@ -196,6 +196,9 @@ struct _virNetworkDef {
     size_t nForwardIfs;
     virNetworkForwardIfDefPtr forwardIfs;
 
+    /* adresses for SNAT */
+    virSocketAddr forwardAddrStart, forwardAddrEnd;
+
     size_t nips;
     virNetworkIpDefPtr ips; /* ptr to array of IP addresses on this network */
 
diff --git a/src/network/bridge_driver.c b/src/network/bridge_driver.c
index 6a9091d..fbc4b4f 100644
--- a/src/network/bridge_driver.c
+++ b/src/network/bridge_driver.c
@@ -1372,6 +1372,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                      &ipdef->address,
                                      prefix,
                                      forwardIf,
+                                     &network->def->forwardAddrStart,
+                                     &network->def->forwardAddrEnd,
                                      NULL) < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
                        forwardIf ?
@@ -1386,6 +1388,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                      &ipdef->address,
                                      prefix,
                                      forwardIf,
+                                     &network->def->forwardAddrStart,
+                                     &network->def->forwardAddrEnd,
                                      "udp") < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
                        forwardIf ?
@@ -1400,6 +1404,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                      &ipdef->address,
                                      prefix,
                                      forwardIf,
+                                     &network->def->forwardAddrStart,
+                                     &network->def->forwardAddrEnd,
                                      "tcp") < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
                        forwardIf ?
@@ -1416,12 +1422,16 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                     &ipdef->address,
                                     prefix,
                                     forwardIf,
+                                    &network->def->forwardAddrStart,
+                                    &network->def->forwardAddrEnd,
                                     "udp");
  masqerr4:
     iptablesRemoveForwardMasquerade(driver->iptables,
                                     &ipdef->address,
                                     prefix,
                                     forwardIf,
+                                    &network->def->forwardAddrStart,
+                                    &network->def->forwardAddrEnd,
                                     NULL);
  masqerr3:
     iptablesRemoveForwardAllowRelatedIn(driver->iptables,
@@ -1452,16 +1462,22 @@ networkRemoveMasqueradingIptablesRules(struct network_driver *driver,
                                         &ipdef->address,
                                         prefix,
                                         forwardIf,
+                                        &network->def->forwardAddrStart,
+                                        &network->def->forwardAddrEnd,
                                         "tcp");
         iptablesRemoveForwardMasquerade(driver->iptables,
                                         &ipdef->address,
                                         prefix,
                                         forwardIf,
+                                        &network->def->forwardAddrStart,
+                                        &network->def->forwardAddrEnd,
                                         "udp");
         iptablesRemoveForwardMasquerade(driver->iptables,
                                         &ipdef->address,
                                         prefix,
                                         forwardIf,
+                                        &network->def->forwardAddrStart,
+                                        &network->def->forwardAddrEnd,
                                         NULL);
 
         iptablesRemoveForwardAllowRelatedIn(driver->iptables,
diff --git a/src/util/iptables.c b/src/util/iptables.c
index 9fc856d..1e4a6b4 100644
--- a/src/util/iptables.c
+++ b/src/util/iptables.c
@@ -803,11 +803,16 @@ iptablesForwardMasquerade(iptablesContext *ctx,
                           virSocketAddr *netaddr,
                           unsigned int prefix,
                           const char *physdev,
+                          virSocketAddr *addrStart,
+                          virSocketAddr *addrEnd,
                           const char *protocol,
                           int action)
 {
-    int ret;
-    char *networkstr;
+    int ret = -1;
+    char *networkstr = NULL;
+    char *addrStartStr = NULL;
+    char *addrEndStr = NULL;
+    char *natRangeStr = NULL;
     virCommandPtr cmd = NULL;
 
     if (!(networkstr = iptablesFormatNetwork(netaddr, prefix)))
@@ -818,8 +823,16 @@ iptablesForwardMasquerade(iptablesContext *ctx,
         virReportError(VIR_ERR_INTERNAL_ERROR,
                        _("Attempted to NAT '%s'. NAT is only supported for IPv4."),
                        networkstr);
-        VIR_FREE(networkstr);
-        return -1;
+        goto cleanup;
+    }
+
+    if (VIR_SOCKET_ADDR_IS_FAMILY(addrStart, AF_INET)) {
+        if (!(addrStartStr = virSocketAddrFormat(addrStart)))
+            goto cleanup;
+        if (VIR_SOCKET_ADDR_IS_FAMILY(addrEnd, AF_INET)) {
+            if (!(addrEndStr = virSocketAddrFormat(addrEnd)))
+                goto cleanup;
+        }
     }
 
     cmd = iptablesCommandNew(ctx->nat_postrouting, AF_INET, action);
@@ -833,13 +846,42 @@ iptablesForwardMasquerade(iptablesContext *ctx,
     if (physdev && physdev[0])
         virCommandAddArgList(cmd, "--out-interface", physdev, NULL);
 
-    virCommandAddArgList(cmd, "--jump", "MASQUERADE", NULL);
+    /* Use --jump SNAT if public addr is specified */
+    if (addrStartStr && addrStartStr[0]) {
+        const char *portStr = "";
+        int r = 0;
 
-    if (protocol && protocol[0])
-        virCommandAddArgList(cmd, "--to-ports", "1024-65535", NULL);
+        if (protocol && protocol[0])
+            portStr = ":1024-65535";
 
-    ret = iptablesCommandRunAndFree(cmd);
+        if (addrEndStr && addrEndStr[0]) {
+            r = virAsprintf(&natRangeStr, "%s-%s%s", addrStartStr, addrEndStr,
+                            portStr);
+        } else {
+            r = virAsprintf(&natRangeStr, "%s%s", addrStartStr, portStr);
+        }
+
+        if (r < 0) {
+            virReportOOMError();
+            goto cleanup;
+        }
+
+        virCommandAddArgList(cmd, "--jump", "SNAT",
+                                  "--to-source", natRangeStr, NULL);
+     } else {
+         virCommandAddArgList(cmd, "--jump", "MASQUERADE", NULL);
+
+         if (protocol && protocol[0])
+             virCommandAddArgList(cmd, "--to-ports", "1024-65535", NULL);
+     }
+
+    ret = virCommandRun(cmd, NULL);
+cleanup:
+    virCommandFree(cmd);
     VIR_FREE(networkstr);
+    VIR_FREE(addrStartStr);
+    VIR_FREE(addrEndStr);
+    VIR_FREE(natRangeStr);
     return ret;
 }
 
@@ -861,9 +903,11 @@ iptablesAddForwardMasquerade(iptablesContext *ctx,
                              virSocketAddr *netaddr,
                              unsigned int prefix,
                              const char *physdev,
+                             virSocketAddr *addrStart,
+                             virSocketAddr *addrEnd,
                              const char *protocol)
 {
-    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev, protocol, ADD);
+    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev, addrStart, addrEnd, protocol, ADD);
 }
 
 /**
@@ -884,9 +928,11 @@ iptablesRemoveForwardMasquerade(iptablesContext *ctx,
                                 virSocketAddr *netaddr,
                                 unsigned int prefix,
                                 const char *physdev,
+                                virSocketAddr *addrStart,
+                                virSocketAddr *addrEnd,
                                 const char *protocol)
 {
-    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev, protocol, REMOVE);
+    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev, addrStart, addrEnd, protocol, REMOVE);
 }
 
 
diff --git a/src/util/iptables.h b/src/util/iptables.h
index e54f8b1..2cd7953 100644
--- a/src/util/iptables.h
+++ b/src/util/iptables.h
@@ -105,11 +105,15 @@ int              iptablesAddForwardMasquerade    (iptablesContext *ctx,
                                                   virSocketAddr *netaddr,
                                                   unsigned int prefix,
                                                   const char *physdev,
+                                                  virSocketAddr *addrStart,
+                                                  virSocketAddr *addrEnd,
                                                   const char *protocol);
 int              iptablesRemoveForwardMasquerade (iptablesContext *ctx,
                                                   virSocketAddr *netaddr,
                                                   unsigned int prefix,
                                                   const char *physdev,
+                                                  virSocketAddr *addrStart,
+                                                  virSocketAddr *addrEnd,
                                                   const char *protocol);
 int              iptablesAddOutputFixUdpChecksum (iptablesContext *ctx,
                                                   const char *iface,
-- 
1.8.3.2

