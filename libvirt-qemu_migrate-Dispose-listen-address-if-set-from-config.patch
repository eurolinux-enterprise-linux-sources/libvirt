From 9e445d2b532b139ae0bc1610e605e25d54372b70 Mon Sep 17 00:00:00 2001
Message-Id: <9e445d2b532b139ae0bc1610e605e25d54372b70.1373885146.git.jdenemar@redhat.com>
From: Michal Privoznik <mprivozn@redhat.com>
Date: Thu, 4 Jul 2013 16:36:36 +0200
Subject: [PATCH] qemu_migrate: Dispose listen address if set from config

https://bugzilla.redhat.com/show_bug.cgi?id=971485

As of d7f9d827531bc843b7c5aa9d3e8c08738a1de248 we copy the listen
address from the qemu.conf config file in case none has been provided
via XML. But later, when migrating, we should not include such listen
address in the migratable XML as it is something autogenerated, not
requested by user. Moreover, the binding to the listen address will
likely fail, unless the address is '0.0.0.0' or its IPv6 equivalent.
This patch introduces a new boolean attribute to virDomainGraphicsListenDef
to distinguish autofilled listen addresses. However, we must keep the
attribute over libvirtd restarts, so it must be kept within status XML.
(cherry picked from commit 6546017c50c104d0b9867137b64ab1f4a312e436)
---
 src/conf/domain_conf.c  | 28 ++++++++++++++++++++++++++++
 src/conf/domain_conf.h  |  1 +
 src/qemu/qemu_process.c |  1 +
 3 files changed, 30 insertions(+)

diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index 8bdb2b7..11f7b05 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -6313,6 +6313,8 @@ virDomainGraphicsListenDefParseXML(virDomainGraphicsListenDefPtr def,
     char *type     = virXMLPropString(node, "type");
     char *address  = virXMLPropString(node, "address");
     char *network  = virXMLPropString(node, "network");
+    char *fromConfig = virXMLPropString(node, "fromConfig");
+    int tmp;
 
     if (!type) {
         virReportError(VIR_ERR_XML_ERROR, "%s",
@@ -6349,6 +6351,17 @@ virDomainGraphicsListenDefParseXML(virDomainGraphicsListenDefPtr def,
         network = NULL;
     }
 
+    if (fromConfig &&
+        flags & VIR_DOMAIN_XML_INTERNAL_STATUS) {
+        if (virStrToLong_i(fromConfig, NULL, 10, &tmp) < 0) {
+            virReportError(VIR_ERR_XML_ERROR,
+                           _("Invalid fromConfig value: %s"),
+                           fromConfig);
+            goto error;
+        }
+        def->fromConfig = tmp != 0;
+    }
+
     ret = 0;
 error:
     if (ret < 0)
@@ -6356,6 +6369,7 @@ error:
     VIR_FREE(type);
     VIR_FREE(address);
     VIR_FREE(network);
+    VIR_FREE(fromConfig);
     return ret;
 }
 
@@ -13292,6 +13306,11 @@ virDomainGraphicsListenDefFormat(virBufferPtr buf,
                                  virDomainGraphicsListenDefPtr def,
                                  unsigned int flags)
 {
+    /* If generating migratable XML, skip listen address
+     * dragged in from config file */
+    if ((flags & VIR_DOMAIN_XML_MIGRATABLE) && def->fromConfig)
+        return;
+
     virBufferAddLit(buf, "      <listen");
 
     if (def->type) {
@@ -13313,6 +13332,9 @@ virDomainGraphicsListenDefFormat(virBufferPtr buf,
         virBufferEscapeString(buf, " network='%s'", def->network);
     }
 
+    if (flags & VIR_DOMAIN_XML_INTERNAL_STATUS)
+        virBufferAsprintf(buf, " fromConfig='%d'", def->fromConfig);
+
     virBufferAddLit(buf, "/>\n");
 }
 
@@ -13339,6 +13361,9 @@ virDomainGraphicsDefFormat(virBufferPtr buf,
     for (i = 0; i < def->nListens; i++) {
         if (virDomainGraphicsListenGetType(def, i)
             == VIR_DOMAIN_GRAPHICS_LISTEN_TYPE_ADDRESS) {
+            if (flags & VIR_DOMAIN_XML_MIGRATABLE &&
+                def->listens[i].fromConfig)
+                continue;
             listenAddr = virDomainGraphicsListenGetAddress(def, i);
             break;
         }
@@ -13450,6 +13475,9 @@ virDomainGraphicsDefFormat(virBufferPtr buf,
         if (virDomainGraphicsListenGetType(def, i)
             == VIR_DOMAIN_GRAPHICS_LISTEN_TYPE_NONE)
             continue;
+        if (flags & VIR_DOMAIN_XML_MIGRATABLE &&
+            def->listens[i].fromConfig)
+            continue;
         if (!children) {
             virBufferAddLit(buf, ">\n");
             children = 1;
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index 6175ae7..18b621f 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -1255,6 +1255,7 @@ struct _virDomainGraphicsListenDef {
     int type;   /* enum virDomainGraphicsListenType */
     char *address;
     char *network;
+    bool fromConfig;    /* true if the @address is config file originated */
 };
 
 struct _virDomainGraphicsDef {
diff --git a/src/qemu/qemu_process.c b/src/qemu/qemu_process.c
index bb16112..51dd0db 100644
--- a/src/qemu/qemu_process.c
+++ b/src/qemu/qemu_process.c
@@ -3667,6 +3667,7 @@ int qemuProcessStart(virConnectPtr conn,
                     virReportOOMError();
                     goto cleanup;
                 }
+                graphics->listens[0].fromConfig = true;
             }
         }
     }
-- 
1.8.3.2

