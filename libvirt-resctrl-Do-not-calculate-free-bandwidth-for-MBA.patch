From bef145fd9b22a310ce7ab8e4cd033bcbe9d40fa9 Mon Sep 17 00:00:00 2001
Message-Id: <bef145fd9b22a310ce7ab8e4cd033bcbe9d40fa9@dist-git>
From: Martin Kletzander <mkletzan@redhat.com>
Date: Mon, 15 Apr 2019 17:33:02 +0200
Subject: [PATCH] resctrl: Do not calculate free bandwidth for MBA
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

For CAT we calculate unallocated parts of the cache, however with MBA this does
not make sense as the purpose of that is to limit the bandwidth and the setting
is only proportional relative to bandwidth settings for other groups.

This means it makes sense to set the values to 100% even if there are other
groups with some allocations and that we don't need to find the available
(unallocated) bandwidth in all the groups.

Signed-off-by: Martin Kletzander <mkletzan@redhat.com>
(cherry picked from commit 408aeebcef1e81e55bebb4f2d47403d04ee16c0f)

Resolves: https://bugzilla.redhat.com/show_bug.cgi?id=1468650

Signed-off-by: Pavel Hrdina <phrdina@redhat.com>
Message-Id: <75b61f0528c91997bf86e6e65b6f4673bad44d75.1555342313.git.phrdina@redhat.com>
Reviewed-by: JÃ¡n Tomko <jtomko@redhat.com>
---
 src/util/virresctrl.c | 52 ++++++++++++-------------------------------
 1 file changed, 14 insertions(+), 38 deletions(-)

diff --git a/src/util/virresctrl.c b/src/util/virresctrl.c
index 4b5442f879..f5e4bef7dc 100644
--- a/src/util/virresctrl.c
+++ b/src/util/virresctrl.c
@@ -1509,22 +1509,6 @@ virResctrlAllocSubtract(virResctrlAllocPtr dst,
 }
 
 
-static void
-virResctrlMemoryBandwidthSubtract(virResctrlAllocPtr free,
-                                  virResctrlAllocPtr used)
-{
-    size_t i;
-
-    if (!used->mem_bw)
-        return;
-
-    for (i = 0; i < used->mem_bw->nbandwidths; i++) {
-        if (used->mem_bw->bandwidths[i])
-            *(free->mem_bw->bandwidths[i]) -= *(used->mem_bw->bandwidths[i]);
-    }
-}
-
-
 static virResctrlAllocPtr
 virResctrlAllocNewFromInfo(virResctrlInfoPtr info)
 {
@@ -1588,15 +1572,18 @@ virResctrlAllocNewFromInfo(virResctrlInfoPtr info)
 }
 
 /*
- * This function creates an allocation that represents all unused parts of
- * all caches and memory bandwidth in the system. It uses virResctrlInfo
- * for creating a new full allocation with all bits set (using the
- * virResctrlAllocNewFromInfo()), sets memory bandwidth 100%, and then scans
- * for all allocations under /sys/fs/resctrl and subtracts each one of them
- * from it. That way it can then return an allocation with only bit set
- * being those that are not mentioned in any other allocation for CAT and
- * available memory bandwidth for MBA. It is used for two things, calculating
- * the masks and bandwidth available when creating allocations and from tests.
+ * This function creates an allocation that represents all unused parts of all
+ * caches in the system.  It uses virResctrlInfo for creating a new full
+ * allocation with all bits set (using virResctrlAllocNewFromInfo()) and then
+ * scans for all allocations under /sys/fs/resctrl and subtracts each one of
+ * them from it.  That way it can then return an allocation with only bit set
+ * being those that are not mentioned in any other allocation.  It is used for
+ * two things, a) calculating the masks when creating allocations and b) from
+ * tests.
+ *
+ * MBA (Memory Bandwidth Allocation) is not taken into account as it is a
+ * limiting setting, not an allocating one.  The way it works is also vastly
+ * different from CAT.
  */
 virResctrlAllocPtr
 virResctrlAllocGetUnused(virResctrlInfoPtr resctrl)
@@ -1642,7 +1629,6 @@ virResctrlAllocGetUnused(virResctrlInfoPtr resctrl)
             goto error;
         }
 
-        virResctrlMemoryBandwidthSubtract(ret, alloc);
         virResctrlAllocSubtract(ret, alloc);
         virObjectUnref(alloc);
         alloc = NULL;
@@ -1795,12 +1781,10 @@ virResctrlAllocFindUnused(virResctrlAllocPtr alloc,
 
 static int
 virResctrlAllocMemoryBandwidth(virResctrlInfoPtr resctrl,
-                               virResctrlAllocPtr alloc,
-                               virResctrlAllocPtr free)
+                               virResctrlAllocPtr alloc)
 {
     size_t i;
     virResctrlAllocMemBWPtr mem_bw_alloc = alloc->mem_bw;
-    virResctrlAllocMemBWPtr mem_bw_free = free->mem_bw;
     virResctrlInfoMemBWPtr mem_bw_info = resctrl->membw_info;
 
     if (!mem_bw_alloc)
@@ -1840,14 +1824,6 @@ virResctrlAllocMemoryBandwidth(virResctrlInfoPtr resctrl,
                            i, mem_bw_info->max_id);
             return -1;
         }
-        if (*(mem_bw_alloc->bandwidths[i]) > *(mem_bw_free->bandwidths[i])) {
-            virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
-                           _("Not enough room for allocation of %u%% "
-                             "bandwidth on node %zd, available bandwidth %u%%"),
-                           *(mem_bw_alloc->bandwidths[i]), i,
-                           *(mem_bw_free->bandwidths[i]));
-            return -1;
-        }
     }
     return 0;
 }
@@ -1914,7 +1890,7 @@ virResctrlAllocAssign(virResctrlInfoPtr resctrl,
     if (!alloc_default)
         goto cleanup;
 
-    if (virResctrlAllocMemoryBandwidth(resctrl, alloc, alloc_free) < 0)
+    if (virResctrlAllocMemoryBandwidth(resctrl, alloc) < 0)
         goto cleanup;
 
     if (virResctrlAllocCopyMasks(alloc, alloc_default) < 0)
-- 
2.21.0

