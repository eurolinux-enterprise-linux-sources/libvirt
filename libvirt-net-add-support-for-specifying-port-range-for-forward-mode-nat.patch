From 57fb83c6e1dc28a674669895a7aa0e0a5edb175c Mon Sep 17 00:00:00 2001
Message-Id: <57fb83c6e1dc28a674669895a7aa0e0a5edb175c.1373885146.git.jdenemar@redhat.com>
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Tue, 2 Jul 2013 03:48:45 -0400
Subject: [PATCH] net: add support for specifying port range for forward mode
 nat

This is part of the resolution to:

  https://bugzilla.redhat.com/show_bug.cgi?id=851455

Let users set the port range to be used for forward mode NAT:

...
  <forward mode='nat'>
    <nat>
      <port start='1024' end='65535'/>
    </nat>
  </forward>
...

Signed-off-by: Natanael Copa <ncopa@alpinelinux.org>
Signed-off-by: Laine Stump <laine@laine.org>
(cherry picked from commit 1716e7a6c5178889bd42d925093715a47c458fc9)

Conflicts:

	src/conf/network_conf.c
	src/conf/network_conf.h
	src/network/bridge_driver.c

          All items in virNetworkDef that were contained in the
          <forward> element (including the nat port range) had been
          moved into a separate struct called virNetworkForwardDef
          upstream. Since the RHEL6.5 version of libvirt lacked this
          separate struct, the new addrStart and addrEnd had to be put
          directly into virNetworkDef as forwardPortStart and
          forwardPortEnd, and all touched code had to be modified
          accordingly.
---
 docs/formatnetwork.html.in  | 21 +++++++++++++---
 src/conf/network_conf.c     | 60 +++++++++++++++++++++++++++++++++++++++------
 src/conf/network_conf.h     |  1 +
 src/network/bridge_driver.c | 16 ++++++++++++
 src/util/iptables.c         | 49 ++++++++++++++++++++++++++++--------
 src/util/iptables.h         |  4 +++
 6 files changed, 131 insertions(+), 20 deletions(-)

diff --git a/docs/formatnetwork.html.in b/docs/formatnetwork.html.in
index 7d9ddca..030ee7d 100644
--- a/docs/formatnetwork.html.in
+++ b/docs/formatnetwork.html.in
@@ -132,9 +132,11 @@
             0.4.2</span>
 
             <p><span class="since">Since 1.0.3</span> it is possible to
-            specify a public IPv4 address range to be used for the NAT by
-            using the <code>&lt;nat&gt;</code> and
-            <code>&lt;address&gt;</code> subelements.
+            specify a public IPv4 address and port range to be used for
+            the NAT by using the <code>&lt;nat&gt;</code> subelement.
+            The address range is set with the <code>&lt;address&gt;</code>
+            subelements and <code>start</code> and <code>stop</code>
+            attributes:
             <pre>
 ...
   &lt;forward mode='nat'&gt;
@@ -148,6 +150,19 @@
             <code>start</code> and <code>end</code> attributes to
             the same value.
             </p>
+            <p>
+            The port range to be used for the <code>&lt;nat&gt;</code> can
+            be set via the subelement <code>&lt;port&gt;</code>:
+            <pre>
+...
+  &lt;forward mode='nat'&gt;
+    &lt;nat&gt;
+      &lt;port start='500' end='1000'/&gt;
+    &lt;/nat&gt;
+  &lt;/forward&gt;
+...
+            </pre>
+            </p>
           </dd>
 
           <dt><code>route</code></dt>
diff --git a/src/conf/network_conf.c b/src/conf/network_conf.c
index fd1cb21..f2450c6 100644
--- a/src/conf/network_conf.c
+++ b/src/conf/network_conf.c
@@ -1219,7 +1219,8 @@ virNetworkForwardNatDefParseXML(const char *networkName,
 {
     int ret = -1;
     xmlNodePtr *natAddrNodes = NULL;
-    int nNatAddrs;
+    xmlNodePtr *natPortNodes = NULL;
+    int nNatAddrs, nNatPorts;
     char *addrStart = NULL;
     char *addrEnd = NULL;
     xmlNodePtr save = ctxt->node;
@@ -1278,6 +1279,39 @@ virNetworkForwardNatDefParseXML(const char *networkName,
         goto cleanup;
     }
 
+    /* ports for SNAT and MASQUERADE */
+    nNatPorts = virXPathNodeSet("./port", ctxt, &natPortNodes);
+    if (nNatPorts < 0) {
+        virReportError(VIR_ERR_XML_ERROR,
+                       _("invalid <port> element found in <forward> of "
+                         "network %s"), networkName);
+        goto cleanup;
+    } else if (nNatPorts > 1) {
+        virReportError(VIR_ERR_XML_ERROR,
+                       _("Only one <port> element is allowed in <nat> in "
+                         "<forward> in network %s"), networkName);
+        goto cleanup;
+    } else if (nNatPorts == 1) {
+        if (virXPathUInt("string(./port[1]/@start)",
+                         ctxt, &def->forwardPortStart) < 0
+            || def->forwardPortStart > 65535) {
+
+            virReportError(VIR_ERR_XML_DETAIL,
+                           _("Missing or invalid 'start' attribute in <port> "
+                             "in <nat> in <forward> in network %s"),
+                             networkName);
+            goto cleanup;
+        }
+        if (virXPathUInt("string(./port[1]/@end)", ctxt,
+                         &def->forwardPortEnd) < 0
+            || def->forwardPortEnd > 65535
+            || def->forwardPortEnd < def->forwardPortStart) {
+            virReportError(VIR_ERR_XML_DETAIL,
+                           _("Missing or invalid 'end' attribute in <port> in "
+                             "<nat> in <forward> in network %s"), networkName);
+            goto cleanup;
+        }
+    }
     ret = 0;
 
 cleanup:
@@ -1948,16 +1982,26 @@ virNetworkForwardNatDefFormat(virBufferPtr buf,
             goto cleanup;
     }
 
-    if (!addrEnd && !addrStart)
+    if (!addrEnd && !addrStart &&
+        !def->forwardPortStart && !def->forwardPortEnd)
         return 0;
 
     virBufferAddLit(buf, "<nat>\n");
     virBufferAdjustIndent(buf, 2);
 
-    virBufferAsprintf(buf, "<address start='%s'", addrStart);
-    if (addrEnd)
-        virBufferAsprintf(buf, " end='%s'", addrEnd);
-    virBufferAddLit(buf, "/>\n");
+    if (addrStart) {
+        virBufferAsprintf(buf, "<address start='%s'", addrStart);
+        if (addrEnd)
+            virBufferAsprintf(buf, " end='%s'", addrEnd);
+        virBufferAddLit(buf, "/>\n");
+    }
+
+    if (def->forwardPortStart || def->forwardPortEnd) {
+        virBufferAsprintf(buf, "<port start='%d'", def->forwardPortStart);
+        if (def->forwardPortEnd)
+            virBufferAsprintf(buf, " end='%d'", def->forwardPortEnd);
+        virBufferAddLit(buf, "/>\n");
+    }
 
     virBufferAdjustIndent(buf, -2);
     virBufferAddLit(buf, "</nat>\n");
@@ -2011,7 +2055,9 @@ char *virNetworkDefFormat(const virNetworkDefPtr def, unsigned int flags)
         }
         shortforward = !(def->nForwardIfs || def->nForwardPfs
                          || VIR_SOCKET_ADDR_VALID(&def->forwardAddrStart)
-                         || VIR_SOCKET_ADDR_VALID(&def->forwardAddrEnd));
+                         || VIR_SOCKET_ADDR_VALID(&def->forwardAddrEnd)
+                         || def->forwardPortStart
+                         || def->forwardPortEnd);
         virBufferAsprintf(&buf, "%s>\n", shortforward ? "/" : "");
         virBufferAdjustIndent(&buf, 2);
 
diff --git a/src/conf/network_conf.h b/src/conf/network_conf.h
index b1c35e5..ff76dcc 100644
--- a/src/conf/network_conf.h
+++ b/src/conf/network_conf.h
@@ -198,6 +198,7 @@ struct _virNetworkDef {
 
     /* adresses for SNAT */
     virSocketAddr forwardAddrStart, forwardAddrEnd;
+    unsigned int forwardPortStart, forwardPortEnd;
 
     size_t nips;
     virNetworkIpDefPtr ips; /* ptr to array of IP addresses on this network */
diff --git a/src/network/bridge_driver.c b/src/network/bridge_driver.c
index fbc4b4f..16fc3df 100644
--- a/src/network/bridge_driver.c
+++ b/src/network/bridge_driver.c
@@ -1374,6 +1374,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                      forwardIf,
                                      &network->def->forwardAddrStart,
                                      &network->def->forwardAddrEnd,
+                                     network->def->forwardPortStart,
+                                     network->def->forwardPortEnd,
                                      NULL) < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
                        forwardIf ?
@@ -1390,6 +1392,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                      forwardIf,
                                      &network->def->forwardAddrStart,
                                      &network->def->forwardAddrEnd,
+                                     network->def->forwardPortStart,
+                                     network->def->forwardPortEnd,
                                      "udp") < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
                        forwardIf ?
@@ -1406,6 +1410,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                      forwardIf,
                                      &network->def->forwardAddrStart,
                                      &network->def->forwardAddrEnd,
+                                     network->def->forwardPortStart,
+                                     network->def->forwardPortEnd,
                                      "tcp") < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
                        forwardIf ?
@@ -1424,6 +1430,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                     forwardIf,
                                     &network->def->forwardAddrStart,
                                     &network->def->forwardAddrEnd,
+                                    network->def->forwardPortStart,
+                                    network->def->forwardPortEnd,
                                     "udp");
  masqerr4:
     iptablesRemoveForwardMasquerade(driver->iptables,
@@ -1432,6 +1440,8 @@ networkAddMasqueradingIptablesRules(struct network_driver *driver,
                                     forwardIf,
                                     &network->def->forwardAddrStart,
                                     &network->def->forwardAddrEnd,
+                                    network->def->forwardPortStart,
+                                    network->def->forwardPortEnd,
                                     NULL);
  masqerr3:
     iptablesRemoveForwardAllowRelatedIn(driver->iptables,
@@ -1464,6 +1474,8 @@ networkRemoveMasqueradingIptablesRules(struct network_driver *driver,
                                         forwardIf,
                                         &network->def->forwardAddrStart,
                                         &network->def->forwardAddrEnd,
+                                        network->def->forwardPortStart,
+                                        network->def->forwardPortEnd,
                                         "tcp");
         iptablesRemoveForwardMasquerade(driver->iptables,
                                         &ipdef->address,
@@ -1471,6 +1483,8 @@ networkRemoveMasqueradingIptablesRules(struct network_driver *driver,
                                         forwardIf,
                                         &network->def->forwardAddrStart,
                                         &network->def->forwardAddrEnd,
+                                        network->def->forwardPortStart,
+                                        network->def->forwardPortEnd,
                                         "udp");
         iptablesRemoveForwardMasquerade(driver->iptables,
                                         &ipdef->address,
@@ -1478,6 +1492,8 @@ networkRemoveMasqueradingIptablesRules(struct network_driver *driver,
                                         forwardIf,
                                         &network->def->forwardAddrStart,
                                         &network->def->forwardAddrEnd,
+                                        network->def->forwardPortStart,
+                                        network->def->forwardPortEnd,
                                         NULL);
 
         iptablesRemoveForwardAllowRelatedIn(driver->iptables,
diff --git a/src/util/iptables.c b/src/util/iptables.c
index 1e4a6b4..88f71a4 100644
--- a/src/util/iptables.c
+++ b/src/util/iptables.c
@@ -805,6 +805,8 @@ iptablesForwardMasquerade(iptablesContext *ctx,
                           const char *physdev,
                           virSocketAddr *addrStart,
                           virSocketAddr *addrEnd,
+                          unsigned int portStart,
+                          unsigned int portEnd,
                           const char *protocol,
                           int action)
 {
@@ -812,6 +814,7 @@ iptablesForwardMasquerade(iptablesContext *ctx,
     char *networkstr = NULL;
     char *addrStartStr = NULL;
     char *addrEndStr = NULL;
+    char *portRangeStr = NULL;
     char *natRangeStr = NULL;
     virCommandPtr cmd = NULL;
 
@@ -846,19 +849,34 @@ iptablesForwardMasquerade(iptablesContext *ctx,
     if (physdev && physdev[0])
         virCommandAddArgList(cmd, "--out-interface", physdev, NULL);
 
+    if (protocol && protocol[0]) {
+        if (portStart == 0 && portEnd == 0) {
+            portStart = 1024;
+            portEnd = 65535;
+        }
+
+        if (portStart < portEnd && portEnd < 65536) {
+            if (virAsprintf(&portRangeStr, ":%u-%u", portStart, portEnd) < 0) {
+                virReportOOMError();
+                goto cleanup;
+            }
+        } else {
+            virReportError(VIR_ERR_INTERNAL_ERROR,
+                           _("Invalid port range '%u-%u'."),
+                           portStart, portEnd);
+        }
+    }
+
     /* Use --jump SNAT if public addr is specified */
     if (addrStartStr && addrStartStr[0]) {
-        const char *portStr = "";
         int r = 0;
 
-        if (protocol && protocol[0])
-            portStr = ":1024-65535";
-
         if (addrEndStr && addrEndStr[0]) {
             r = virAsprintf(&natRangeStr, "%s-%s%s", addrStartStr, addrEndStr,
-                            portStr);
+                            portRangeStr ? portRangeStr : "");
         } else {
-            r = virAsprintf(&natRangeStr, "%s%s", addrStartStr, portStr);
+            r = virAsprintf(&natRangeStr, "%s%s", addrStartStr,
+                            portRangeStr ? portRangeStr : "");
         }
 
         if (r < 0) {
@@ -871,8 +889,8 @@ iptablesForwardMasquerade(iptablesContext *ctx,
      } else {
          virCommandAddArgList(cmd, "--jump", "MASQUERADE", NULL);
 
-         if (protocol && protocol[0])
-             virCommandAddArgList(cmd, "--to-ports", "1024-65535", NULL);
+         if (portRangeStr && portRangeStr[0])
+             virCommandAddArgList(cmd, "--to-ports", &portRangeStr[1], NULL);
      }
 
     ret = virCommandRun(cmd, NULL);
@@ -881,6 +899,7 @@ cleanup:
     VIR_FREE(networkstr);
     VIR_FREE(addrStartStr);
     VIR_FREE(addrEndStr);
+    VIR_FREE(portRangeStr);
     VIR_FREE(natRangeStr);
     return ret;
 }
@@ -905,9 +924,14 @@ iptablesAddForwardMasquerade(iptablesContext *ctx,
                              const char *physdev,
                              virSocketAddr *addrStart,
                              virSocketAddr *addrEnd,
+                             unsigned int portStart,
+                             unsigned int portEnd,
                              const char *protocol)
 {
-    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev, addrStart, addrEnd, protocol, ADD);
+    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev,
+                                     addrStart, addrEnd,
+                                     portStart, portEnd,
+                                     protocol, ADD);
 }
 
 /**
@@ -930,9 +954,14 @@ iptablesRemoveForwardMasquerade(iptablesContext *ctx,
                                 const char *physdev,
                                 virSocketAddr *addrStart,
                                 virSocketAddr *addrEnd,
+                                unsigned int portStart,
+                                unsigned int portEnd,
                                 const char *protocol)
 {
-    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev, addrStart, addrEnd, protocol, REMOVE);
+    return iptablesForwardMasquerade(ctx, netaddr, prefix, physdev,
+                                     addrStart, addrEnd,
+                                     portStart, portEnd,
+                                     protocol, REMOVE);
 }
 
 
diff --git a/src/util/iptables.h b/src/util/iptables.h
index 2cd7953..9bc62a1 100644
--- a/src/util/iptables.h
+++ b/src/util/iptables.h
@@ -107,6 +107,8 @@ int              iptablesAddForwardMasquerade    (iptablesContext *ctx,
                                                   const char *physdev,
                                                   virSocketAddr *addrStart,
                                                   virSocketAddr *addrEnd,
+                                                  unsigned int portStart,
+                                                  unsigned int portEnd,
                                                   const char *protocol);
 int              iptablesRemoveForwardMasquerade (iptablesContext *ctx,
                                                   virSocketAddr *netaddr,
@@ -114,6 +116,8 @@ int              iptablesRemoveForwardMasquerade (iptablesContext *ctx,
                                                   const char *physdev,
                                                   virSocketAddr *addrStart,
                                                   virSocketAddr *addrEnd,
+                                                  unsigned int portStart,
+                                                  unsigned int portEnd,
                                                   const char *protocol);
 int              iptablesAddOutputFixUdpChecksum (iptablesContext *ctx,
                                                   const char *iface,
-- 
1.8.3.2

