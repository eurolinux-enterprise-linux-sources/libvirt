From 1d3eeeeca8501d72d64f989c3a956e9bd6dfd348 Mon Sep 17 00:00:00 2001
Message-Id: <1d3eeeeca8501d72d64f989c3a956e9bd6dfd348.1354720508.git.jdenemar@redhat.com>
From: Osier Yang <jyang@redhat.com>
Date: Mon, 3 Dec 2012 21:16:36 +0800
Subject: [PATCH] node_memory: Do not fail if there is parameter unsupported

https://bugzilla.redhat.com/show_bug.cgi?id=872656

It makes no sense to fail the whole getting command if there is
a parameter unsupported by the kernel. This patch fixes it by
omitting the unsupported parameter for getMemoryParameters.

And for setMemoryParameters, this checks if there is an unsupported
parameter up front of the setting, and just returns failure if not
all parameters are supported.
(cherry picked from commit ebdbe25a97fc0b718fc17ed07db7608621ec8a57)
---
 src/libvirt.c  |  11 ++---
 src/nodeinfo.c | 127 +++++++++++++++++++++++++++++++++++++--------------------
 2 files changed, 89 insertions(+), 49 deletions(-)

diff --git a/src/libvirt.c b/src/libvirt.c
index 3ca251b..711806d 100644
--- a/src/libvirt.c
+++ b/src/libvirt.c
@@ -6735,10 +6735,10 @@ error:
  * @nparams: pointer to number of memory parameters; input and output
  * @flags: extra flags; not used yet, so callers should always pass 0
  *
- * Get all node memory parameters.  On input, @nparams gives the size
- * of the @params array; on output, @nparams gives how many slots were
- * filled with parameter information, which might be less but will
- * not exceed the input value.
+ * Get all node memory parameters (parameters unsupported by OS will be
+ * omitted).  On input, @nparams gives the size of the @params array;
+ * on output, @nparams gives how many slots were filled with parameter
+ * information, which might be less but will not exceed the input value.
  *
  * As a special case, calling with @params as NULL and @nparams as 0 on
  * input will cause @nparams on output to contain the number of parameters
@@ -6800,7 +6800,8 @@ error:
  *           value nparams of virDomainGetSchedulerType)
  * @flags: extra flags; not used yet, so callers should always pass 0
  *
- * Change all or a subset of the node memory tunables.
+ * Change all or a subset of the node memory tunables. The function
+ * fails if not all of the tunables are supported.
  *
  * Note that it's not recommended to use this function while the
  * outside tuning program is running (such as ksmtuned under Linux),
diff --git a/src/nodeinfo.c b/src/nodeinfo.c
index aaac5e3..9f510e6 100644
--- a/src/nodeinfo.c
+++ b/src/nodeinfo.c
@@ -958,14 +958,15 @@ nodeGetCPUmap(virConnectPtr conn ATTRIBUTE_UNUSED,
 
 #ifdef __linux__
 static int
-nodeSetMemoryParameterValue(const char *field,
-                            virTypedParameterPtr param)
+nodeSetMemoryParameterValue(virTypedParameterPtr param)
 {
     char *path = NULL;
     char *strval = NULL;
     int ret = -1;
     int rc = -1;
 
+    char *field = strchr(param->field, '_');
+    field++;
     if (virAsprintf(&path, "%s/%s",
                     SYSFS_MEMORY_SHARED_PATH, field) < 0) {
         virReportOOMError();
@@ -980,7 +981,7 @@ nodeSetMemoryParameterValue(const char *field,
     }
 
     if ((rc = virFileWriteStr(path, strval, 0)) < 0) {
-        virReportSystemError(-rc, _("failed to set %s"), field);
+        virReportSystemError(-rc, _("failed to set %s"), param->field);
         goto cleanup;
     }
 
@@ -990,6 +991,38 @@ cleanup:
     VIR_FREE(strval);
     return ret;
 }
+
+static bool
+nodeMemoryParametersIsAllSupported(virTypedParameterPtr params,
+                                   int nparams)
+{
+    char *path = NULL;
+    int i;
+
+    for (i = 0; i < nparams; i++) {
+        virTypedParameterPtr param = &params[i];
+
+        char *field = strchr(param->field, '_');
+        field++;
+        if (virAsprintf(&path, "%s/%s",
+                        SYSFS_MEMORY_SHARED_PATH, field) < 0) {
+            virReportOOMError();
+            return false;
+        }
+
+        if (!virFileExists(path)) {
+            virReportError(VIR_ERR_OPERATION_INVALID,
+                           _("Parameter '%s' is not supported by "
+                             "this kernel"), param->field);
+            VIR_FREE(path);
+            return false;
+        }
+
+        VIR_FREE(path);
+    }
+
+    return true;
+}
 #endif
 
 int
@@ -1001,8 +1034,8 @@ nodeSetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
     virCheckFlags(0, -1);
 
 #ifdef __linux__
-    int ret = 0;
     int i;
+    int rc;
 
     if (virTypedParameterArrayValidate(params, nparams,
                                        VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN,
@@ -1014,34 +1047,18 @@ nodeSetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
                                        NULL) < 0)
         return -1;
 
-    for (i = 0; i < nparams; i++) {
-        virTypedParameterPtr param = &params[i];
-
-        if (STREQ(param->field,
-                  VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN)) {
-            ret = nodeSetMemoryParameterValue("pages_to_scan", param);
-
-            /* Out of memory */
-            if (ret == -2)
-                return -1;
-        } else if (STREQ(param->field,
-                         VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS)) {
-            ret = nodeSetMemoryParameterValue("sleep_millisecs", param);
+    if (!nodeMemoryParametersIsAllSupported(params, nparams))
+        return -1;
 
-            /* Out of memory */
-            if (ret == -2)
-                return -1;
-        } else if (STREQ(param->field,
-                         VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES)) {
-            ret = nodeSetMemoryParameterValue("merge_across_nodes", param);
+    for (i = 0; i < nparams; i++) {
+        rc = nodeSetMemoryParameterValue(&params[i]);
 
-            /* Out of memory */
-            if (ret == -2)
-                return -1;
-        }
+        /* Out of memory */
+        if (rc == -2)
+            return -1;
     }
 
-    return ret;
+    return 0;
 #else
     virReportError(VIR_ERR_NO_SUPPORT, "%s",
                    _("node set memory parameters not implemented"
@@ -1067,6 +1084,11 @@ nodeGetMemoryParameterValue(const char *field,
         goto cleanup;
     }
 
+    if (!virFileExists(path)) {
+        ret = -2;
+        goto cleanup;
+    }
+
     if (virFileReadAll(path, 1024, &buf) < 0)
         goto cleanup;
 
@@ -1117,6 +1139,7 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
     unsigned long long pages_volatile;
     unsigned long long full_scans = 0;
     int i;
+    int ret;
 
     if ((*nparams) == 0) {
         *nparams = NODE_MEMORY_PARAMETERS_NUM;
@@ -1128,8 +1151,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
 
         switch(i) {
         case 0:
-            if (nodeGetMemoryParameterValue("pages_to_scan",
-                                            &pages_to_scan) < 0)
+            ret = nodeGetMemoryParameterValue("pages_to_scan", &pages_to_scan);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN,
@@ -1139,8 +1164,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
             break;
 
         case 1:
-            if (nodeGetMemoryParameterValue("sleep_millisecs",
-                                            &sleep_millisecs) < 0)
+            ret = nodeGetMemoryParameterValue("sleep_millisecs", &sleep_millisecs);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS,
@@ -1150,8 +1177,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
             break;
 
         case 2:
-            if (nodeGetMemoryParameterValue("pages_shared",
-                                            &pages_shared) < 0)
+            ret = nodeGetMemoryParameterValue("pages_shared", &pages_shared);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_PAGES_SHARED,
@@ -1161,8 +1190,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
             break;
 
         case 3:
-            if (nodeGetMemoryParameterValue("pages_sharing",
-                                            &pages_sharing) < 0)
+            ret = nodeGetMemoryParameterValue("pages_sharing", &pages_sharing);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_PAGES_SHARING,
@@ -1172,8 +1203,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
             break;
 
         case 4:
-            if (nodeGetMemoryParameterValue("pages_unshared",
-                                            &pages_unshared) < 0)
+            ret = nodeGetMemoryParameterValue("pages_unshared", &pages_unshared);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED,
@@ -1183,8 +1216,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
             break;
 
         case 5:
-            if (nodeGetMemoryParameterValue("pages_volatile",
-                                            &pages_volatile) < 0)
+            ret = nodeGetMemoryParameterValue("pages_volatile", &pages_volatile);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE,
@@ -1194,8 +1229,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
             break;
 
         case 6:
-            if (nodeGetMemoryParameterValue("full_scans",
-                                            &full_scans) < 0)
+            ret = nodeGetMemoryParameterValue("full_scans", &full_scans);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_FULL_SCANS,
@@ -1205,8 +1242,10 @@ nodeGetMemoryParameters(virConnectPtr conn ATTRIBUTE_UNUSED,
             break;
 
         case 7:
-            if (nodeGetMemoryParameterValue("merge_across_nodes",
-                                            &merge_across_nodes) < 0)
+            ret = nodeGetMemoryParameterValue("merge_across_nodes", &merge_across_nodes);
+            if (ret == -2)
+                continue;
+            else if (ret == -1)
                 return -1;
 
             if (virTypedParameterAssign(param, VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES,
-- 
1.8.0

